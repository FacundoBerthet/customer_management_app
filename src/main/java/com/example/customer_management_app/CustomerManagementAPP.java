package com.example.customer_management_app;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
// Importaciones para validaci√≥n manual
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import jakarta.validation.Validation;
import java.util.Set;

@SpringBootApplication
public class CustomerManagementAPP {

  private static final Logger log = LoggerFactory.getLogger(CustomerManagementAPP.class);

  public static void main(String[] args) {
    SpringApplication.run(CustomerManagementAPP.class);
  }

  @Bean
  public CommandLineRunner demo(CustomerRepository repository) {
    return (args) -> {
      // ‚≠ê CONFIGURAR VALIDADOR MANUAL
      ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
      Validator validator = factory.getValidator();

      // ‚úÖ DATOS V√ÅLIDOS - estos deber√≠an funcionar
      log.info("üü¢ PROBANDO DATOS V√ÅLIDOS:");
      log.info("==============================");
      
      Customer validCustomer = new Customer("Jack", "Bauer", "jack.bauer@ctu.gov");
      Set<ConstraintViolation<Customer>> violations = validator.validate(validCustomer);
      
      if (violations.isEmpty()) {
        repository.save(validCustomer);
        log.info("‚úÖ Cliente v√°lido guardado: " + validCustomer.toString());
      } else {
        log.error("‚ùå Cliente inv√°lido, errores:");
        violations.forEach(v -> log.error("   - " + v.getMessage()));
      }

      // ‚ùå DATOS INV√ÅLIDOS - estos deber√≠an fallar las validaciones
      log.info("");
      log.info("üî¥ PROBANDO DATOS INV√ÅLIDOS:");
      log.info("==============================");

      // Test 1: Nombre muy corto
      Customer shortName = new Customer("A", "Bauer", "test@email.com");
      violations = validator.validate(shortName);
      log.info("üß™ Test 1 - Nombre muy corto:");
      if (!violations.isEmpty()) {
        violations.forEach(v -> log.error("   ‚ùå " + v.getMessage()));
      }

      // Test 2: Email inv√°lido
      Customer invalidEmail = new Customer("Juan", "P√©rez", "email-malformado");
      violations = validator.validate(invalidEmail);
      log.info("üß™ Test 2 - Email inv√°lido:");
      if (!violations.isEmpty()) {
        violations.forEach(v -> log.error("   ‚ùå " + v.getMessage()));
      }

      // Test 3: Tel√©fono con formato incorrecto
      Customer invalidPhone = new Customer("Mar√≠a", "Garc√≠a", "maria@email.com", "123456789", "Direcci√≥n");
      violations = validator.validate(invalidPhone);
      log.info("üß™ Test 3 - Tel√©fono formato incorrecto:");
      if (!violations.isEmpty()) {
        violations.forEach(v -> log.error("   ‚ùå " + v.getMessage()));
      }

      // Test 4: Nombre vac√≠o
      Customer emptyName = new Customer("", "Apellido", "test@email.com");
      violations = validator.validate(emptyName);
      log.info("üß™ Test 4 - Nombre vac√≠o:");
      if (!violations.isEmpty()) {
        violations.forEach(v -> log.error("   ‚ùå " + v.getMessage()));
      }

      // ‚úÖ GUARDAR ALGUNOS DATOS V√ÅLIDOS PARA LAS CONSULTAS
      log.info("");
      log.info("üíæ GUARDANDO DATOS V√ÅLIDOS PARA PRUEBAS:");
      log.info("=========================================");
      
      repository.save(new Customer("Chloe", "O'Brian", "chloe.obrian@ctu.gov"));
      repository.save(new Customer("Kim", "Bauer", "kim.bauer@gmail.com"));
      repository.save(new Customer("Tony", "Almeida", "tony.almeida@ctu.gov", "555-1234", "Los Angeles, CA"));

      // üìã MOSTRAR TODOS LOS CLIENTES GUARDADOS
      log.info("");
      log.info("üìã CLIENTES GUARDADOS EN LA BASE DE DATOS:");
      log.info("==========================================");
      repository.findAll().forEach(customer -> {
        log.info("‚úÖ " + customer.toString());
      });

      factory.close();
    };
  }
}